
// ir
int SensorPin = 13; 
int LedPin = 2; 
int BuzzerPin = 3; 
 
void setup() { 
        pinMode(LedPin, OUTPUT); 
        pinMode(BuzzerPin, OUTPUT); 
        pinMode(SensorPin, INPUT); 
        Serial.begin(9600); 
} 
 
void loop() { 
        int SensorValue = digitalRead(SensorPin); 
        Serial.print("SensorPin: "); 
        Serial.println(SensorValue); 
        delay(100); 
        if (SensorValue == 1) { 
                digitalWrite(LedPin, HIGH); 
                digitalWrite(BuzzerPin, LOW); 
        } else { 
                digitalWrite(LedPin, LOW); 
                digitalWrite(BuzzerPin, HIGH); 
        } 
}

//temp
## python
import time 
import Adafruit_DHT 
import RPi.GPIO as GPIO 
 
# Set up GPIO for LEDs 
GPIO.setmode(GPIO.BCM) 
led_pin = 18  # Example GPIO pin for the LED 
GPIO.setup(led_pin, GPIO.OUT) 
 
# Initialize DHT11 sensor 
dht_pin = 17  # GPIO pin for DHT11 data 
sensor = Adafruit_DHT.DHT11 
 
# Threshold temperature in Celsius 
threshold_temp = 25.0 
 
try: 
    while True: 
        # Read temperature and humidity from DHT11 sensor 
        humidity, temperature = Adafruit_DHT.read_retry(sensor, dht_pin) 
 
        if humidity is not None and temperature is not None: 
            # Print temperature and humidity 
            print(f"Temperature: {temperature:.2f}Â°C, Humidity: {humidity:.2f}%")
# Check if temperature crosses the threshold 
            if temperature > threshold_temp: 
                GPIO.output(led_pin, GPIO.HIGH)  # Turn on the LED 
            else: 
                GPIO.output(led_pin, GPIO.LOW)   # Turn off the LED 
        else: 
            print("Failed to retrieve data from DHT11 sensor") 
 
        time.sleep(2)  # Wait for 2 seconds before reading again 
 
except KeyboardInterrupt: 
    GPIO.cleanup()  # Clean up GPIO on program exit 
    
    // camera
    from picamera import PiCamera 
from time import sleep 
 
camera=PiCamera() 
camera.start_preview() 
#camera.resolution=(600,900) 
camera.vflip=True 
#camera.hflip=True 
sleep(10) 
camera.capture('/home/pi/Desktop/test_d.jpg') 
camera.stop_preview() 
 
###################################Camcorder ##############################
 
from picamera import PiCamera 
from time import sleep 
 
camera=PiCamera() 
camera.vflip=True 
camera.start_preview() 
camera.start_recording('/home/pi/d_b.h264') 
sleep(5) 
camera.resolution=(600,900) 
camera.stop_recording() 
camera.stop_preview() 

### Play video 
##           omxplayer /home/pi/d_b.h264
# change accordingly

// ultras
const int trigPin = 9; 
const int LED =11; 
const int echoPin = 10; 
long duration; 
int distance; 
void setup() { 
  Serial.println("Started"); 
  pinMode(trigPin, OUTPUT);  
  pinMode(echoPin, INPUT);  
  pinMode(LED, OUTPUT); 
  Serial.begin(4800); // Starts the serial communication 
} 
void loop() { 
  // Clears the trigPin 
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2); 
  // Sets the trigPin on HIGH state for 10 micro seconds 
  digitalWrite(trigPin, HIGH); 
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW); 
 // Reads the echoPin, returns the sound wave travel time in microseconds 
  duration = pulseIn(echoPin, 
HIGH); 
  distance = duration * 0.034 / 2; 
  Serial.print("Distance: ");     
  Serial.println(distance); 
  if(distance<100 && 
distance>20) 
  { 
    digitalWrite(LED, HIGH); 
    delay(200); 
    digitalWrite(LED, LOW); 
    delay(200); 
  } 
  if(distance<=20) 
  { 
    digitalWrite(LED, HIGH); 
    delay(50); 
    digitalWrite(LED, LOW); 
    delay(50); 
  } 
} 

import RPi.GPIO as GPIO
import time

# Set GPIO mode to BCM
GPIO.setmode(GPIO.BCM)

# Set GPIO pins for the ultrasonic sensor
trig_pin = 17  # GPIO17
echo_pin = 18  # GPIO18

# Set up GPIO pins
GPIO.setup(trig_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)

try:
    while True:
        # Trigger the ultrasonic sensor
        GPIO.output(trig_pin, GPIO.HIGH)
        time.sleep(0.00001)
        GPIO.output(trig_pin, GPIO.LOW)

        # Measure the time for the echo to return
        while GPIO.input(echo_pin) == 0:
            pulse_start = time.time()

        while GPIO.input(echo_pin) == 1:
            pulse_end = time.time()

        pulse_duration = pulse_end - pulse_start

        # Calculate distance using the speed of sound (343 m/s)
        distance = pulse_duration * 17150
        distance = round(distance, 2)

        print(f"Distance: {distance} cm")
        time.sleep(1)

except KeyboardInterrupt:
    print("Exiting due to keyboard interrupt.")

finally:
    # Clean up GPIO on exit
    GPIO.cleanup()


